(load-library "base64")
(get-buffer-create "*wassr*")
(setq *unsafe-string* (split-string " ;/?:@&=+$<>#%\"," ""))
(defun url-encode (s)
  (let ((fun #'(lambda (c lis) (if (null lis) 
                                   nil
                                 (if (equal c (car lis))
                                     c
                                   (funcall fun c (cdr lis))))))
        (unsafe-p #'(lambda (c) 
                      (funcall fun c *unsafe-string*)))
        )
    (mapconcat '(lambda (c) (if (funcall unsafe-p c) 
                                (format "%%%X" (string-to-char c))
                              c))
               (split-string s "") ""))
)

(defun wassr-get (credential)
  (let ((conn (open-network-stream "wassr" "*wassr*" "api.wassr.jp" 80)))
    (set-process-coding-system conn 'utf-8 'utf-8)
    (process-send-string conn 
                         "GET /statuses/friends_timeline.json HTTP/1.0\r\n")
    (process-send-string conn "Host: api.wassr.jp\r\n")
    (process-send-string conn "Accept: */*\r\n")
    (process-send-string conn "Connection: close\r\n")
    (process-send-string conn "User-Agent: elisp-wassr 0.8\r\n")
    (process-send-string conn (concat "Authorization: Basic " credential "\r\n"))
    (process-send-string conn "\r\n")
    ))

(defun wassr-post (credential msg)
  (let ((conn (open-network-stream "wassr" "*wassr*" "api.wassr.jp" 80))
;  (let ((conn (open-network-stream "wassr" "*wassr*" "localhost" 1033))
        )
    
    (set-process-coding-system conn 'utf-8 'utf-8)
    (process-send-string conn "POST /statuses/update.json HTTP/1.1\r\n")
    (process-send-string conn "Host: api.wassr.jp\r\n")
    (process-send-string conn "Accept: */*\r\n")
    (process-send-string conn "Connection: close\r\n")
    (process-send-string conn "User-Agent: elisp-wassr 0.8\r\n")
    (process-send-string conn (concat "Authorization: Basic " credential "\r\n"))
    (process-send-string conn "Content-Type: application/x-www-form-urlencoded\r\n")
    (process-send-string conn (concat "Content-Length: " (number-to-string(length msg)) "\r\n"))
    (process-send-string conn "\r\n")
    (process-send-string conn msg)
    ))

(let ((user (read-from-minibuffer "user-id: "))
      (pass (read-passwd "password: "))
      (msg nil))
  
;  (wassr-get (base64-encode-string (concat user ":" pass)))

  (wassr-post (base64-encode-string (concat user ":" pass))
              (concat "status=" (url-encode (read-from-minibuffer "msg: ")) "&reply_status_rid=&source=wassr.el"))
)
